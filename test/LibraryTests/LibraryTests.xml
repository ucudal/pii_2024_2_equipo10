<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryTests</name>
    </assembly>
    <members>
        <member name="T:LibraryTests.AttackTest">
            <summary>
            Test de la clase <see cref="T:Library.Attack"/>
            </summary>
        </member>
        <member name="M:LibraryTests.AttackTest.TestAccuracy0">
            <summary>
            Test del atributo Accuracy en 0.
            </summary>
        </member>
        <member name="M:LibraryTests.AttackTest.TestPower0">
            <summary>
            Test del atributo Power en 0.
            </summary>
        </member>
        <member name="M:LibraryTests.AttackTest.TestNullName">
            <summary>
            Test del nombre nulo
            </summary>
        </member>
        <member name="M:LibraryTests.AttackTest.TestInvalidAccuracy">
            <summary>
            Test de Accuracy inválido.
            </summary>
        </member>
        <member name="M:LibraryTests.AttackTest.TestInvalidPower">
            <summary>
            Test de Power invalido.
            </summary>
        </member>
        <member name="T:LibraryTests.CaterpieTest">
            <summary>
            Test de la clase <see cref="T:Library.Caterpie"/>
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Caterpie
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Caterpie
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Caterpie, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.CaterpieTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.CharizardTest">
            <summary>
            Test de la clase <see cref="T:Library.Charizard"/>
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Charizard
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Charizard
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Charizard, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.CharizardTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.ChikoritaTest">
            <summary>
            Test de la clase <see cref="T:Library.Chikorita"/>
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Chikorita
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Chikorita
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Chikorita, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.ChikoritaTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.EnteiTest">
            <summary>
            Test de la clase <see cref="T:Library.Entei"/>
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Entei
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Entei
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Entei, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.EnteiTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.FacadeTest">
            <summary>
            Tests de la clase <see cref="T:Library.Facade"/>
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory1Add1Pokemon">
            <summary>
            Verifica que un jugador puede añadir un Pokemon a su equipo.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory1RepeatedPokemon">
            <summary>
            Comprueba que no se puede añadir un Pokemon ya presente en el equipo del jugador.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory1LastPokemon">
            <summary>
            Verifica que cuando el jugador completa su equipo con 6 Pokemon,
            se muestra un mensaje indicando que el equipo está completo.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory1FullTeam">
             <summary>
            Comprueba que no se pueden agregar más de 6 Pokemon a un equipo. 
             </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory1PlayerNotInGame">
            <summary>
            Verifica que se muestre un mensaje de error cuando un jugador intenta elegir un Pokemon sin estar en una partida.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory1UnknownPokemon">
            <summary>
            Verifica que si un jugador intenta elegir un Pokemon inexistente, se muestra un mensaje de error.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory2">
            <summary>
            Verifica que un jugador puede ver los ataques de su Pokemon activo.
            Si el jugador no tiene Pokemon, se muestra un mensaje que se lo informa.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory3NullPlayer">
            <summary>
            Verifica que si un jugador no está en ninguna partida, se muestra un mensaje de error al
            intentar ver el HP de los Pokemon.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory31Pokemon">
            <summary>
            Verifica que se muestra el HP de los Pokemon del jugador y también si otro jugador no ha completado su equipo.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory3FullTeams">
            <summary>
            Verifica que cuando ambos jugadores tienen equipos completos, se puede muestrar el HP de los Pokemon de ambos
            jugadores.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory4NullPlayer">
            <summary>
            Verifica que un jugador no puede realizar un ataque si no está en una partida.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory4IncompleteTeams">
            <summary>
            Verifica que si alguno de los jugadores no tiene su equipo completo, no pueden realizarse ataques.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory4FullTeams">
            <summary>
            Verifica que un jugador puede realizar un ataque solo si es el jugador activo y si el ataque existe en su
            lista de ataques.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory5">
            <summary>
            Verifica que se muestre correctamente de que jugador es el turno.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory5UnknownPlayer">
            <summary>
            Verifica que se muestra un mensaje de error al verificar el turno si el jugador no está en ninguna partida.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory6NullGame">
            <summary>
            Verifica que se muestra un mensaje de error al corroborar el estado de una partida si la misma no se encuentra.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory6">
            <summary>
            Verifica que se muestra el estado correcto del juego, indicando de quien es el siguiente turno.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory7NotInGame">
            <summary>
            Verifica que se muestra un mensaje de error si un jugador intenta cambiar su Pokemon activo sin estar en una
            partida.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory7">
            <summary>
            Verifica que un jugador puede cambiar su Pokémon activo solo si está en una partida y si el Pokemon
            pertenece a su equipo. Se valida que se muestren mensajes de error si el Pokemon no está en el equipo o si
            no es el jugador activo.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory8NullPlayer">
            <summary>
            Verifica que se muestra un mensaje de error si un jugador intenta usar un item sin estar en una partida.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory8PlayersNotReady">
            <summary>
            Verifica que un jugador no puede usar un item si el otro jugador no ha completado su equipo.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory8InactivePlayer">
            <summary>
            Verifica que el jugador inactivo no pueda usar items.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory8ExpectedUse">
            <summary>
            Verifica que el jugador activo pueda usar un item correctamente.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory9">
            <summary>
            Valida que un jugador pueda ser agregado correctamente a la lista de espera.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory9_1">
            <summary>
            Verifica que un jugador pueda ser eliminado de la lista de espera correctamente.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory10">
            <summary>
            Verifica que la lista de jugadores en espera se muestre correctamente.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestUserStory11">
            <summary>
            Verifica la lógica de inicio de partida entre dos jugadores en espera.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestSurrender">
            <summary>
            Verifica que un jugador solo pueda rendirse si está en una partida activa.
            </summary>
        </member>
        <member name="M:LibraryTests.FacadeTest.TestShowItems">
            <summary>
            Verifica que los items disponibles de un jugador se muestren correctamente.
            </summary>
        </member>
        <member name="T:LibraryTests.FullHealthTest">
            <summary>
            Test de la clase <see cref="T:Library.FullHealth"/>
            </summary>
        </member>
        <member name="M:LibraryTests.FullHealthTest.FullHealthCorrectUse">
            <summary>
            Verifica que al usar una FullHealth sobre un Pokemon dormido, su estado se restablezca correctamente.
            </summary>
        </member>
        <member name="M:LibraryTests.FullHealthTest.FullHealthUseOnHealthyPokemon">
            <summary>
            Verifica que al usar una FullHealth sobre un Pokemon sin estado negativo, el resultado sea un mensaje
            indicando que actualmente no tiene ningún estado negativo.
            </summary>
        </member>
        <member name="M:LibraryTests.FullHealthTest.FullHealthNullPokemon">
            <summary>
            Verifica que al intentar usar una FullHealth sobre un Pokemon nulo, el resultado sea nulo.
            </summary>
        </member>
        <member name="T:LibraryTests.GameListTest">
            <summary>
            Tests de la clase GameList
            </summary>
        </member>
        <member name="M:LibraryTests.GameListTest.TestAddGame">
            <summary>
            Verifica que el método AddGame agrega correctamente un juego a la lista de juegos.
            </summary>
        </member>
        <member name="M:LibraryTests.GameListTest.TestRemoveGame">
            <summary>
            Verifica que el método RemoveGame elimina correctamente un juego de la lista de juegos
            y que no puede eliminar un juego que no está en la lista.
            </summary>
        </member>
        <member name="M:LibraryTests.GameListTest.TestFindPlayerByName">
            <summary>
            Verifica que el método FindPlayerByName devuelve el jugador correcto cuando se busca por
            nombre y retorna null si el jugador no existe.
            </summary>
        </member>
        <member name="M:LibraryTests.GameListTest.TestFindGameByPlayer">
            <summary>
            Verifica que el método FindGameByPlayer devuelve el juego en el que se encuentra un jugador y retorna
            null si el jugador no participa en ningún juego.
            </summary>
        </member>
        <member name="M:LibraryTests.GameListTest.TestGetGameList">
            <summary>
            Verifica que el método GetGameList devuelve correctamente la lista de juegos.
            </summary>
        </member>
        <member name="M:LibraryTests.GameTest.TestChangePokemon">
            <summary>
            Verifica que el método ChangePokemon cambia correctamente el Pokemon activo de un jugador durante la partida.
            </summary>
        </member>
        <member name="M:LibraryTests.GameTest.TestWinnerPlayer1">
            <summary>
            Verifica que el método Winner devuelve correctamente el ganador de la partida, en caso de que sea el jugador 1.
            </summary>
        </member>
        <member name="M:LibraryTests.GameTest.TestWinnerPlayer2">
            <summary>
            Verifica que el método Winner devuelve correctamente el ganador de la partida, en caso de que sea el jugador 2.
            </summary>
        </member>
        <member name="T:LibraryTests.GastrodonTest">
            <summary>
            Test de la clase <see cref="T:Library.Gastrodon"/>
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Gastrodon
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Gastrodon
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Gastrodon, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.GastrodonTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.GengarTest">
            <summary>
            Test de la clase <see cref="T:Library.Gengar"/>
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Gengar
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Gengar
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Gengar, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.GengarTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.HaxorusTest">
            <summary>
            Test de la clase <see cref="T:Library.Haxorus"/>
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Haxorus
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Haxorus
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Haxorus, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.HaxorusTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.HydreigonTest">
            <summary>
            Test de la clase <see cref="T:Library.Hydreigon"/>
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Hydreigon
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Hydreigon
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Hydreigon, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.HydreigonTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.MewtwoTest">
            <summary>
            Test de la clase <see cref="T:Library.Mewtwo"/>
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Mewtwo
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Mewtwo
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Mewtwo, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.MewtwoTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
        <member name="T:LibraryTests.ReviveTest">
            <summary>
            Test de la clase <see cref="T:Library.Revive"/>
            </summary>
        </member>
        <member name="M:LibraryTests.ReviveTest.ReviveCorrectUse">
            <summary>
            Verifica que el item Revive funciona correctamente.
            </summary>
        </member>
        <member name="M:LibraryTests.ReviveTest.ReviveWrongUse">
            <summary>
            Verifica que el item Revive no puede utilizarse sobre un Pokemon que no está debilitado.
            </summary>
        </member>
        <member name="T:LibraryTests.SpecialAttackTest">
            <summary>
            Test de la clase <see cref="T:Library.SpecialAttack"/>
            </summary>
        </member>
        <member name="M:LibraryTests.SpecialAttackTest.TestConstructor">
            <summary>
            Test del constructor de <see cref="T:Library.SpecialAttack"/>.
            </summary>
        </member>
        <member name="M:LibraryTests.SpecialAttackTest.TestLowerCooldown">
            <summary>
            Test para el método <see cref="M:Library.SpecialAttack.LowerCooldown"/> para verificar que el cooldown disminuye correctamente.
            </summary>
        </member>
        <member name="M:LibraryTests.SpecialAttackTest.TestSetCooldown">
            <summary>
            Test para el método <see cref="M:Library.SpecialAttack.SetCooldown"/> para asegurar que el cooldown se restablece a 4.
            </summary>
        </member>
        <member name="M:LibraryTests.SpecialAttackTest.TestInfoAttack">
            <summary>
            Test del método <see cref="M:Library.SpecialAttack.InfoAttack"/> para verificar que la descripción del ataque sea correcta.
            </summary>
        </member>
        <member name="M:LibraryTests.StateLogicTest.AsleepEffectDecreasesTurnsAndReturnsTrue">
            <summary>
            Verifica que la lógica de AsleepEffect disminuya correctamente los AsleepTurn
            del Pokemon y devuelva true si aún está dormido.
            /// </summary>
        </member>
        <member name="M:LibraryTests.StateLogicTest.AsleepEffectWakesPokemonAndReturnsFalse">
            <summary>
            Verifica que la lógica de AsleepEffect despierte al Pokemon 
            (estableciendo su estado en null) y devuelva false si su AsleepTurns llega a 0.    /// </summary>
        </member>
        <member name="M:LibraryTests.StateLogicTest.AsleepEffectIsNotSet">
            Verifica que AsleepEffect devuelva false si el Pokemon no está dormido.
        </member>
        <member name="M:LibraryTests.StateLogicTest.ParalizedEffectRandomness">
            <summary>
            Verifica que la probabilidad de que ParalizedEffect devuelva true 
            se mantenga  dentro del rango esperado (25% con tolerancia).
            </summary>
        </member>
        <member name="M:LibraryTests.StateLogicTest.PoisonedEffectDecreasesLife">
            <summary>
            Verifica que PoisonedEffect reduzca correctamente la vida actual de un Pokemon envenenado,
            basado en su vida base.
            </summary>
        </member>
        <member name="M:LibraryTests.StateLogicTest.BurnedEffectDecreaseLife">
            <summary>
            Verifica que BurnedEffect reduzca correctamente la vida actual de un Pokemon quemado,
            basado en su vida base.
            </summary>
        </member>
        <member name="T:LibraryTests.SuperPotionTest">
            <summary>
            Test de la clase <see cref="T:Library.SuperPotion"/>
            </summary>
        </member>
        <member name="M:LibraryTests.SuperPotionTest.SuperPotionCorrectUse1">
            <summary>
            Verifica que SuperPotion recupere correctamente 70HP de un Pokemon después de recibir 60 puntos de daño,
            llevando su vida a su valor inicial.
            </summary>
        </member>
        <member name="M:LibraryTests.SuperPotionTest.SuperPotionCorrectUse2">
            <summary>
            Verifica que SuperPotion recupere correctamente 70HP de un Pokemon después de recibir 80 puntos de daño.
            </summary>
        </member>
        <member name="M:LibraryTests.SuperPotionTest.SuperPotionHealthyPokemonUse">
            <summary>
            Verifica que SuperPotion no tenga efecto si el Pokemon ya tiene su vida completa,
            y que la vida del Pokemon no haya cambiado.
            </summary>
        </member>
        <member name="M:LibraryTests.SuperPotionTest.NullPokemonTest">
            <summary>
            Verifica que al intentar usar SuperPotion con un Pokemon nulo, el resultado sea nulo.
            </summary>
        </member>
        <member name="T:LibraryTests.WaitingListTest">
            <summary>
            Tests de la clase WaitingList
            </summary>
        </member>
        <member name="M:LibraryTests.WaitingListTest.TestAddPlayer">
            <summary>
            Test del método AddPlayer
            </summary>
        </member>
        <member name="M:LibraryTests.WaitingListTest.TestRemovePlayer">
            <summary>
            Test del método RemovePlayer
            </summary>
        </member>
        <member name="M:LibraryTests.WaitingListTest.TestFindPlayerByName">
            <summary>
            Test del método FindPlayerByName
            </summary>
        </member>
        <member name="M:LibraryTests.WaitingListTest.TestGetSomeone">
            <summary>
            Test del método GetSomeone
            </summary>
        </member>
        <member name="M:LibraryTests.WaitingListTest.TestGetWaitingList">
            <summary>
            Test del método GetWaitingList
            </summary>
        </member>
        <member name="T:LibraryTests.ZeraoraTest">
            <summary>
            Test de la clase <see cref="T:Library.Zeraora"/>
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestName">
            <summary>
            Test del atributo name
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestType">
            <summary>
            Test del atributo type
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestLifeAndCurrentLife">
            <summary>
            Test de los atributos life y currentLife
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestIfItHasFourAttacks">
            <summary>
            Test de la cantidad de ataques que tiene Zeraora
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestAddAFifthAttack">
            <summary>
            Test de la limitación de movimientos que tiene Zeraora
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestCurrentStateAndEditState">
            <summary>
            Test del atributo CurrentState y el método EditSate
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestAsleepTurns">
            <summary>
            Test del atributo asleepTurns
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestAttacks">
            <summary>
            Test de metodo FindAttackByName y los ataques que tiene Zeraora, confirmando que fueron creados correctamente
            </summary>
        </member>
        <member name="M:LibraryTests.ZeraoraTest.TestRestoreBaseLifeTakeDamageAndGetLife">
            <summary>
            Test de los métodos RestoreBaseLife, TakeDamage y GetLife
            </summary>
        </member>
    </members>
</doc>
